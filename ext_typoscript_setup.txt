#############################################################################
# This extension is compatible with the configuration of tx_jphcodesnippets_pi
# More details at the bottom of this file
#############################################################################


# include library
includeLibs.vjrtecodesnippets = EXT:vjrtecodesnippets/class.user_vjrtecodesnippets.php

# configure parsing of the <code> tag
# if you like to change the tag name make sure to change the PageTSConfig as well
lib.parseFunc_RTE.tags.code = TEXT
lib.parseFunc_RTE.tags.code.current = 1

# the following configuration is taken from tx_jphcodesnippets_pi to be independent optionally
lib.parseFunc_RTE.tags.code.postUserFunc {

	# div or pre
	headerType = div
	enableClasses = 1
	overallClass =
	overallId =
	overallStyle = 
	overallStyleDefaults = 
	lineStyle1 = background: #eeeeee;
	lineStyle2 = background: #fffff;
	lineStyleDefaults =
	linesExtraStyle = background: #ffcccc;
	codeStyle =
	tabWidth = 2
}

# the default style directly adapted from tx_jphcodesnippets_pi
plugin.tx_vjrtecodesnippets._CSS_DEFAULT_STYLE (

	.tx-vjrtecodesnippets {
		font-family: 'Courier New', Courier, monospace;
		font-weight: normal;
	}

	.tx-vjrtecodesnippets .imp { font-weight: bold; color: red; }
	.tx-vjrtecodesnippets .ln-xtra { background: #ffcccc; }
	.tx-vjrtecodesnippets li { background: #eeeeee; }
	.tx-vjrtecodesnippets li.li2 { background: #ffffff; }
	.tx-vjrtecodesnippets .kw1 { color: #b1b100; }
	.tx-vjrtecodesnippets .kw2 { color: #000000; font-weight: bold;}
	.tx-vjrtecodesnippets .kw3 { color: #000066;}
	.tx-vjrtecodesnippets .co1 { color: #808080; font-style: italic; }
	.tx-vjrtecodesnippets .co2 { color: #808080; font-style: italic; }
	.tx-vjrtecodesnippets .coMULTI { color: #808080; font-style: italic; }
	.tx-vjrtecodesnippets .es0 { color: #000099; font-weight: bold; }
	.tx-vjrtecodesnippets .br0 { color: #66cc66; }
	.tx-vjrtecodesnippets .st0 { color: #ff0000; }
	.tx-vjrtecodesnippets .nu0 { color: #cc66cc; }
	.tx-vjrtecodesnippets .me1 { color: #006600; }
	.tx-vjrtecodesnippets .me2 { color: #006600; }
	.tx-vjrtecodesnippets .re0 { color: #0000ff; }
)


# additional config that is usually made within the flexform of plugin.tx_jphcodesnippets_pi
lib.parseFunc_RTE.tags.code.postUserFunc {

	# 0 - no numbers, 1 - normal numbers or 2 fancy numbers
	lineNumbers = 1

	# if line numbering is fancy, every nth_row will be fancy
	nth_row = 2	
	
	# enables function linking
	functionLinking = 1
	
	# if enabled <br /> will be converted to \n before parsing with geshi
	convertBR2LBR = 1
	
	# removes html entities before transferring content to geshi
	htmlentitydecode = 1

	# the amount of spaces (&nbsp;) that must occur to be converted to one tab (chr(9))
	# e.g. if convertSpace2Tab = 3 then &nbsp; followed three times will be converted to one tab
	convertSpace2Tab = 3

	# remove linebreaks generated by GeSHi, e.g. to avoid wrapping lines with p/div
	removeGeSHiLBR = 1

	# You can use stdWrap for fancy things. The {field:...} contains all parameters that are
	# saved in the <code> element
	# e.g. you could define a download link
	stdWrap {
		wrap = <div class="code tx-vjrtecodesnippets">|</div>
		append = COA
		append {
			
			1 = TEXT
			1.value = Download
			1.if.isFalse.field = downloadtitle
			
			2 = TEXT 
			2.field = downloadtitle
			2.if.isTrue.field = downloadtitle
			
			stdWrap.wrap = <p class="download-link">|</p>
			stdWrap.typolink.parameter.field = url
			
			if.isTrue.field = url
		}
	}
	
}


#############################################################################
# This extension is compatible with the configuration of tx_jphcodesnippets_pi
# If you want to use this configuration remove the # of the next lines

# plugin.tx_vjrtecodesnippets._CSS_DEFAULT_STYLE >
# lib.parseFunc_RTE.tags.code.postUserFunc.stdWrap.wrap = <div class="code tx_jphcodesnippets_pi">|</div>
# lib.parseFunc_RTE.tags.code.postUserFunc < plugin.tx_jphcodesnippets_pi
#############################################################################


# avoid remapping div tag
lib.parseFunc_RTE.nonTypoTagStdWrap.encapsLines.remapTag.DIV >

# set the user function 
lib.parseFunc_RTE.tags.code.postUserFunc = user_vjrtecodesnippets->highlight



